"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

from logging.handlers import RotatingFileHandler

from dotenv import load_dotenv
from corsheaders.defaults import default_headers, default_methods



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load environment variables from .env file
load_dotenv(os.path.join(BASE_DIR, '.env'))


def env_list(name: str, default: str = '') -> list[str]:
    value = os.getenv(name, default)
    if not value:
        return []
    return [item.strip() for item in value.split(',') if item.strip()]


def env_int(name: str, default: int | None = None) -> int | None:
    value = os.getenv(name)
    if value in (None, ''):
        return default
    try:
        return int(value)
    except ValueError:
        return default

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', os.getenv('SECRET_KEY', ''))

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', os.getenv('DEBUG', 'False')).lower() == 'true'

ALLOWED_HOSTS = env_list('ALLOWED_HOSTS')
if not ALLOWED_HOSTS:
    ALLOWED_HOSTS = [
        'backend.airporttransfer.transfertakip.com',
        'dev.backend.airporttransferhub.com',
        'localhost',
        '127.0.0.1',
    ]


AUTH_USER_MODEL = 'accounts.Account'

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'storages', 

    'corsheaders',

    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'django_filters',
    'dj_rest_auth',
    'dj_rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.apple',

    'authentication.apps.AuthenticationConfig',
    'accounts.apps.AccountsConfig', 
    'common', 
    'transfer', 

    'blog.apps.BlogConfig', 

]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DB_NAME', os.getenv('POSTGRESQL_DB_NAME')),
        'USER': os.getenv('DB_USER', os.getenv('POSTGRESQL_USER')),
        'PASSWORD': os.getenv('DB_PASSWORD', os.getenv('POSTGRESQL_PASSWORD')),
        'HOST': os.getenv('DB_HOST', os.getenv('POSTGRESQL_HOST', 'localhost')),
        'PORT': env_int('DB_PORT', env_int('POSTGRESQL_PORT', 5432)) or 5432,
    }
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': env_int('AUTH_PASSWORD_MIN_LENGTH', 5) or 5,
        },
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_TZ = True
TIME_ZONE = 'Europe/Istanbul'

CORS_ALLOWED_ORIGINS = env_list('CORS_ALLOWED_ORIGINS')
if not CORS_ALLOWED_ORIGINS and DEBUG:
    CORS_ALLOWED_ORIGINS = [
        'http://localhost:3000',
        'http://localhost:4200',
        'http://localhost:5173',
    ]
CORS_ALLOW_ALL_ORIGINS = False
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = list(default_methods)
CORS_ALLOW_HEADERS = list(default_headers) + [
    'authorization',
    'x-language',
    'x-requested-with',
    'x-csrftoken',
]
CSRF_TRUSTED_ORIGINS = env_list('CSRF_TRUSTED_ORIGINS')

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',

        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    'EXCEPTION_HANDLER': 'core.utils.custom_exception_handler',
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend', 
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.CustomPageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_THROTTLE_RATES': {
        'auth_burst': '10/min',
        'auth_sensitive': '5/min',
    },
}

ACCESS_TOKEN_LIFETIME_DAYS = env_int('ACCESS_TOKEN_LIFETIME_DAYS', 30) or 30
REFRESH_TOKEN_LIFETIME_DAYS = env_int('REFRESH_TOKEN_LIFETIME_DAYS', 180) or 180

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=ACCESS_TOKEN_LIFETIME_DAYS),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=REFRESH_TOKEN_LIFETIME_DAYS),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}


DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'info@airporttransferhub.com')

EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST', os.getenv('EMAIL_HOST_AIRPORTTRANSFERHUB', ''))
EMAIL_PORT = env_int('EMAIL_PORT', env_int('EMAIL_PORT_AIRPORTTRANSFERHUB', 587)) or 587
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'true').lower() == 'true'
EMAIL_USE_SSL = os.getenv('EMAIL_USE_SSL', 'false').lower() == 'true'
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', os.getenv('EMAIL_HOST_USER_AIRPORTTRANSFERHUB', ''))
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', os.getenv('EMAIL_HOST_PASSWORD_AIRPORTTRANSFERHUB', ''))
EMAIL_TIMEOUT = env_int('EMAIL_TIMEOUT', 10) or 10

SITE_ID = env_int('SITE_ID', 1) or 1

AUTH_FRONTEND_URL = os.getenv('AUTH_FRONTEND_URL')
if not AUTH_FRONTEND_URL and CORS_ALLOWED_ORIGINS:
    AUTH_FRONTEND_URL = CORS_ALLOWED_ORIGINS[0]


DEFAULT_LANGUAGE = 'en'

FRONTEND_URL = AUTH_FRONTEND_URL or (
    'http://localhost:4200' if DEBUG else 'https://airporttransferhub.com'
)
BACKEND_URL = os.getenv(
    'BACKEND_URL',
    'http://localhost:8000' if DEBUG else 'https://backend.airporttransfer.transfertakip.com',
)

AUTH_EMAIL_TOKEN_MAX_AGE = env_int('AUTH_EMAIL_TOKEN_MAX_AGE', 60 * 60 * 24) or 60 * 60 * 24
AUTH_PASSWORD_RESET_TOKEN_MAX_AGE = env_int('AUTH_PASSWORD_RESET_TOKEN_MAX_AGE', 60 * 60 * 2) or 60 * 60 * 2
PASSWORD_RESET_TIMEOUT = AUTH_PASSWORD_RESET_TOKEN_MAX_AGE

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_RATE_LIMITS = {
    'login_failed': {
        'limit': env_int('ACCOUNT_LOGIN_ATTEMPTS_LIMIT', 5) or 5,
        'timeout': env_int('ACCOUNT_LOGIN_ATTEMPTS_TIMEOUT', 300) or 300,
    },
}

REST_AUTH = {
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'ath_access',
    'JWT_AUTH_REFRESH_COOKIE': 'ath_refresh',
    'TOKEN_MODEL': None,
}

REST_AUTH_SERIALIZERS = {
    'USER_DETAILS_SERIALIZER': 'accounts.serializers.AuthUserSerializer',
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'accounts.serializers.RegisterSerializer',
}

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/' 
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'airporttransfer.log'),
            'maxBytes': 1 * 1024 * 1024,  # 1 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },

        # Handlers for different log levels of the airporttransfer logger
        'airporttransfer_debug_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'airporttransfer.debug.log'),
            'maxBytes': 1 * 1024 * 1024,  # 1 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'airporttransfer_info_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'airporttransfer.info.log'),
            'maxBytes': 1 * 1024 * 1024,  # 1 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
        'airporttransfer_error_file': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, 'logs', 'airporttransfer.error.log'),
            'maxBytes': 1 * 1024 * 1024,  # 1 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['file'],
        'level': 'DEBUG',
    },
    'loggers': {
        'airporttransfer': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'airporttransfer': {
            'handlers': ['airporttransfer_debug_file', 'airporttransfer_info_file', 'airporttransfer_error_file'],
            'level': 'DEBUG',
            'propagate': False,  # Prevent messages from propagating to the root logger
        },
    },
}

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME', 'eu-north-1')  # Default to 'eu-north-1' if not set
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

# Optional: to make files public
AWS_DEFAULT_ACL = 'public-read'

STORAGES = {
    "default": {
        "BACKEND": "storages.backends.s3boto3.S3Boto3Storage",
        "OPTIONS": {
            "bucket_name": os.getenv("AWS_STORAGE_BUCKET_NAME"),
            "region_name": os.getenv("AWS_S3_REGION_NAME", "eu-north-1"),
            "file_overwrite": True,
            "custom_domain": f'{os.getenv("AWS_STORAGE_BUCKET_NAME")}.s3.{os.getenv("AWS_S3_REGION_NAME", "eu-north-1")}.amazonaws.com',
        },
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.StaticFilesStorage",
    },
}


# Media files
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

# Slug policy per language: "latin" (ASCII) or "unicode" (keep native chars)
BLOG_SLUG_POLICY = {
    "en": "latin",
    "de": "latin",
    "tr": "latin",
    "ru": "unicode",   # keep Cyrillic if you want native URLs for Russian
}
BLOG_SLUG_DEFAULT_POLICY = "latin"

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.db.DatabaseCache",
        "LOCATION": "django_cache",  # table name
        "TIMEOUT": 600,              # 10 minutes (set what you like)
        "OPTIONS": {
            "MAX_ENTRIES": 10000,
            "CULL_FREQUENCY": 3,     # evict 1/3 when full
        },
        "KEY_PREFIX": "ath",         # short, unique prefix
    },
}
